---
# tasks file for k8s-master
 - name: "Installing docker"
   package:
     name: docker
     state: present

 - name: "Starting and Enabling docker service"
   service:
     name: docker
     state: started
     enabled: yes
    
 - name: "Configuring yum repo for kubernetes"
   copy:
     src: "/k8s-multi-node-cluster/k8s-master/files/kubernetes.repo"
     dest: "/etc/yum.repos.d/kubernetes.repo"

 - name: "Installing kubeadm, kubectl, kubelet"
   yum:
     name: "{{ item }}"
     state: present
     disable_excludes: kubernetes
   loop: "{{ packages }}" 

 - name: "Starting and Enabling kubelet"
   service:
     name: kubelet
     state: started
     enabled: yes

 - name: "Pulling Images using kubeadm"
   shell: "kubeadm config images pull"
   changed_when: false   


 - name: "Changing the driver in the docker"
   copy:
      content: |
         {
            "exec-opts": ["native.cgroupdriver=systemd"]
         }
      dest: /etc/docker/daemon.json
   register: output

 - name: "Restarting Docker"
   service:
      name: docker
      state: restarted
   when: output.changed == true   

 - name: "Installing iproute-tc"
   package:
      name: iproute-tc
      state: present
 
 - name: "Setting bridge-nf-call-iptables to 1"
   shell: | 
       echo "1"  > /proc/sys/net/bridge/bridge-nf-call-iptables
   changed_when: false

 - name: "Initializing Master"
   shell: "kubeadm init --pod-network-cidr={{ cidr }} --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem --node-name=master"
   ignore_errors: yes

 - name: "Creating .kube directory"
   shell: "mkdir -p $HOME/.kube"  

 - name: "Copying /etc/kubernetes/admin.conf $HOME/.kube/config"
   shell: "sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config" 

 - name: "changing owner permission"
   shell: "sudo chown $(id -u):$(id -g) $HOME/.kube/config"

 - name: "Configuring with flannel plugin"
   shell: "kubectl apply  -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
  
 - name: "Generating Token"
   shell: "kubeadm token create  --print-join-command"
   register: token
   ignore_errors: yes

 - debug: 
     var: token.stdout_lines
   register: token
